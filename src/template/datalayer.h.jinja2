#include <datalayerBase.h>

{% if enums | length > 0 -%}
// defines all enumeration
{% endif -%}
{% for enum in enums -%}
enum class {{ enum.name }} : {{ enum.type }}
{
{%- if enum.autoId%}
{%- for value in enum["values"] %}
    {{ value }},
{%- endfor %}
{%- else %}
{%- for value in enum["values"] | sort(attribute='value') %}
    {{ value.name }} = {{ value.value }},
{%- endfor %}
{%- endif %}
};

{% endfor %}
{% if structs | length > 0 -%}
// defines all custom made structures
{% endif -%}
{% for struct in structs -%}
struct {{ struct.name }}
{
    {%- for parameter in struct.parameter | sort(attribute='name') %}
    {{ parameter.value }} {{ parameter.name }};
    {%- endfor %}
};
{%- endfor %}

{% if groups | length > 0 -%}
// defines all existing groups
{% endif -%}
{% for group in groups -%}
constexpr DataLayer::GroupInfo<{{ group.baseId }}, "{{ group.name }}", DataLayer::Persistance::{{ group.persistence }}, Version<{{ group.version.major }}, {{ group.version.minor }}, {{ group.version.build }}>{}> {{ group.name }}Info;
{% endfor %}

{%- set namespace_name = namespace(value="") %}
{% for dp in data_points|sort(attribute='name')|sort(attribute='namespace') -%}
{%- if dp.namespace|length %}
{%- if dp.namespace != namespace_name.value %}
{%- set namespace_name.value = dp.namespace %}
namespace {{ dp.namespace }}
{
{%- endif -%}
DataLayer::DataPoint<
{%- if dp.arraySize > 0 -%}
        std::array<{{ dp.type }}, {{ dp.arraySize }}>
    {%- else -%}
        {{ dp.type }}
    {%- endif -%}
    , {{ dp.group }}Info, 0x{{ "%0x" | format( dp.id | int) }}, Helper::{{ dp.access }}, Version<{{ dp.version.major }}, {{ dp.version.minor }}, {{ dp.version.build }}>{}, "{{ dp.name }}"> {{ dp.name }}
    {%- if 'default' in dp -%}
    (
    {%- if dp.arraySize > 0 -%}
        DataLayer::Detail::make_array<{{ dp.type }}, {{ dp.arraySize }}>(
        {%- if dp.default is number -%}
            {{ dp.default }})
        {%- else -%} {
            {%- for attr in dp.default.keys() | sort() -%}
                .{{ attr }}={{ dp.default[attr] }}, {% endfor -%} })
        {%- endif -%}
    {%- else %}
        {%- if dp.default is number -%}
            {{ dp.default }}
        {%- else -%}
            {% for attr in dp.default.keys() | sort() -%}
                .{{ attr }}={{ dp.default[attr] }}
            {%- endfor %}
        {%- endif %}
    {%- endif -%}
    )
{%- endif %};

{%- if dp.namespace != namespace_name.value %}
{%- set namespace_name.value = dp.namespace %}
} // namespace {{ dp.namespace }}
{%- endif %}
{%- else %}
DataLayer::DataPoint<
{%- if dp.arraySize > 0 -%}
    std::array<{{ dp.type }}, {{ dp.arraySize }}>
{%- else -%}
    {{ dp.type }}
{%- endif -%}
    , {{ dp.group }}Info, 0x{{ "%0x" | format( dp.id | int) }}, Helper::{{ dp.access }}, Version<{{ dp.version.major }}, {{ dp.version.minor }}, {{ dp.version.build }}>{}, "{{ dp.name }}"> {{ dp.name }}
    {%- if 'default' in dp -%}
    (
        {%- if dp.arraySize > 0 -%}
            DataLayer::Detail::make_array<{{ dp.type }}, {{ dp.arraySize }}>(
             {%- if dp.default is number -%}
                {{ dp.default }})
            {%- else -%} {
                {%- for attr in dp.default.keys() | sort() -%}
                    .{{ attr }}={{ dp.default[attr] }}, {% endfor -%} })
            {%- endif -%}
        {%- else %}
            {%- if dp.default is number -%}
                {{ dp.default }}
            {%- else -%}
                {{ dp.type }}{
                {%- for attr in dp.default.keys() | sort() -%}
                    .{{ attr }}={{ dp.default[attr] }}, {% endfor -%} }
            {%- endif -%}
        {%- endif -%}
    )
    {%- endif %};
{%- endif %}

{%- if namespace_name.value != "" and  loop.last %}
} // namespace {{ namespace_name.value }}
{%- endif %}
{%- endfor %}

{% if group_data_points_mapping | length > 0 -%}
// defines group to datapoint mapping
{%- endif -%}
{%- for group in group_data_points_mapping %}
constexpr DataLayer::GroupDataPointMapping {{ group  }} { {{ group }}Info, {% for parameter in group_data_points_mapping[group] -%}
    {{ parameter }}{% if not loop.last %}, {% endif %}
    {%- endfor %} };
{%- endfor %}

// Dispatcher is responsible to handling all requests and also generates responses
constexpr DataLayer::Dispatcher Dispatcher { {% for group in group_data_points_mapping -%}
    {{ group }}{% if not loop.last %}, {% endif %}
{%- endfor %} };
